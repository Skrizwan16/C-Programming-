#include <iostream>
#include <vector>

using namespace std;

bool isSafe(const vector<int>& board, int row, int col) {
    // Check if there is a queen in the same column
    for (int i = 0; i < row; ++i) {
        if (board[i] == col)
            return false;
        // Check diagonals
        if (abs(i - row) == abs(board[i] - col))
            return false;
    }
    return true;
}

void solveNQueens(vector<vector<int>>& solutions, vector<int>& board, int row, int n) {
    if (row == n) {
        // Found a solution
        solutions.push_back(board);
        return;
    }

    for (int col = 0; col < n; ++col) {
        if (isSafe(board, row, col)) {
            board[row] = col;
            solveNQueens(solutions, board, row + 1, n);
        }
    }
}

void printBoard(const vector<int>& board) {
    int n = board.size();
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (board[i] == j)
                cout << "Q ";
            else
                cout << ". ";
        }
        cout << endl;
    }
    cout << endl;
}

int main() {
    int n;
    cout << "Enter the number of queens (N): ";
    cin >> n;

    vector<vector<int>> solutions;
    vector<int> board(n, 0);
    solveNQueens(solutions, board, 0, n);

    int numSolutions = solutions.size();
    if (numSolutions == 0) {
        cout << "No solutions found." << endl;
    } else {
        cout << "Total solutions: " << numSolutions << endl;
        cout << "One of the solutions: " << endl;
        printBoard(solutions[0]); // Printing one of the solutions
    }

    return 0;
}
