#include <iostream>

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};

class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode *dummy = new ListNode(0);
        dummy->next = head;
        ListNode *prev = dummy;
        ListNode *curr = head;
        
        while (curr) {
            ListNode *start = prev->next;
            ListNode *end = curr;
            int count = 0;
            while (curr && count < k) {
                curr = curr->next;
                count++;
            }
            if (count == k) {
                prev->next = reverseList(start, k);
                start->next = curr;
                prev = start;
            } else {
                prev->next = start;
            }
        }
        
        return dummy->next;
    }
    
    ListNode* reverseList(ListNode* head, int k) {
        ListNode *prev = nullptr;
        ListNode *curr = head;
        while (k--) {
            ListNode *nextTemp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextTemp;
        }
        return prev;
    }
};

// Utility function to print the linked list
void printList(ListNode* head) {
    while (head) {
        std::cout << head->val << " ";
        head = head->next;
    }
    std::cout << std::endl;
}

int main() {
    // Example usage
    ListNode* head = new ListNode(1);
    head->next = new ListNode(2);
    head->next->next = new ListNode(3);
    head->next->next->next = new ListNode(4);
    head->next->next->next->next = new ListNode(5);
    
    Solution sol;
    int k = 2; // Change k value for different group sizes
    std::cout << "Original list: ";
    printList(head);
    ListNode* reversed = sol.reverseKGroup(head, k);
    std::cout << "Reversed list in groups of " << k << ": ";
    printList(reversed);
    
    return 0;
}
